<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: equipment-update-request.proto

namespace Cinexpert\Messages\EquipmentUpdateRequest;

use UnexpectedValueException;

/**
 * Protobuf type <code>Cinexpert.Messages.EquipmentUpdateRequest.ResourceType</code>
 */
class ResourceType
{
    /**
     * Generated from protobuf enum <code>UNDEFINED = 0;</code>
     */
    const UNDEFINED = 0;
    /**
     * Generated from protobuf enum <code>CHAIN = 1;</code>
     */
    const CHAIN = 1;
    /**
     * Generated from protobuf enum <code>CINEMA = 2;</code>
     */
    const CINEMA = 2;
    /**
     * Generated from protobuf enum <code>ROOM = 3;</code>
     */
    const ROOM = 3;
    /**
     * Generated from protobuf enum <code>EQUIPMENT = 4;</code>
     */
    const EQUIPMENT = 4;
    /**
     * Generated from protobuf enum <code>EQUIPMENT_MODEL = 5;</code>
     */
    const EQUIPMENT_MODEL = 5;

    private static $valueToName = [
        self::UNDEFINED => 'UNDEFINED',
        self::CHAIN => 'CHAIN',
        self::CINEMA => 'CINEMA',
        self::ROOM => 'ROOM',
        self::EQUIPMENT => 'EQUIPMENT',
        self::EQUIPMENT_MODEL => 'EQUIPMENT_MODEL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ResourceType::class, \Cinexpert\Messages\EquipmentUpdateRequest_ResourceType::class);

